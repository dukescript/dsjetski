// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the 
//          version in your base theme's directory, 
//          for example alta/widgets/_oj.alta.button.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../utilities/oj.utilities";


@if $includeButtonsetClasses != false {
  @include module-include-once("common.buttonset") {

    /* buttonset */
    /* --------------------------------------------------------------- */

    .oj-buttonset { 
        display: inline-block; // so buttonset shows in same row as rest of containing toolbar, unlike display:block
        white-space:nowrap;
    }
    
    /* Due to limitations in CSS syntax, the buttonset rules that depend on half-chrome vs. full-chrome check whether 
       the buttonset itself has .oj-button-half-chrome.  This is why we require that half-chrome buttonsets have the 
       class on the buttonset itself.*/
    
    .oj-buttonset:not(.oj-button-half-chrome) {
        // inline-block makes whitespace appear between the buttons if the html has any whitespace 
        // between the tags.  We previously avoided this by removing all the text nodes at create time, but it caused 
        // problems with the KO foreach binding.  To make the whitespace go away, we now set font size to 0.
        // This means we have to set vertical-align to top, and must set the button font-size 
        // explicitly below.
        font-size: 0;
        vertical-align: top;
    }

    .oj-buttonset:not(.oj-button-half-chrome) .oj-button { 
        @include oj-border-radius(0);
        border-right-width: 0; // collapse borders between buttons.  We restore the last button's right border below.

        // don't override .oj-button's margin-bottom which properly spaces 
        // buttons that wrap to the next line 
        margin-left: 0; 
        margin-right: 0;
        
        font-size: $fontSize; // see above comment about inline-block whitespace
    }

    /* .oj-buttonset-first is applied to the first button of the buttonset. */
    .oj-buttonset:not(.oj-button-half-chrome) .oj-buttonset-first {

        @include oj-ltr() {
          @include oj-border-top-left-radius($buttonBorderRadius, $slowOverride: false);
          @include oj-border-bottom-left-radius($buttonBorderRadius, $slowOverride: false);
        }
        @include oj-rtl() {
          border-right-width: 1px; // restore the last button's right border
          @include oj-border-top-right-radius($buttonBorderRadius, $slowOverride: false);
          @include oj-border-bottom-right-radius($buttonBorderRadius, $slowOverride: false);
        }

        @include oj-border-radius-slowoverride();
    }

    /* .oj-buttonset-last is applied to the last button of the buttonset. */
    .oj-buttonset:not(.oj-button-half-chrome) .oj-buttonset-last {
        @include oj-ltr() {
          border-right-width: 1px; // restore the last button's right border
          @include oj-border-top-right-radius($buttonBorderRadius, $slowOverride: false);
          @include oj-border-bottom-right-radius($buttonBorderRadius, $slowOverride: false);
        }
        @include oj-rtl() {
          @include oj-border-top-left-radius($buttonBorderRadius, $slowOverride: false);
          @include oj-border-bottom-left-radius($buttonBorderRadius, $slowOverride: false);
        }

        @include oj-border-radius-slowoverride();
    }
    
    /* "Internal" Full-chrome Buttonset borders (those *between* buttonset buttons) */
    
    // The border *between* full-chrome buttonset buttons is a different color than when not in a buttonset, only if 
    // the button owning the border (the right button) is active or selected or selectedHover or selectedDisabled.
    // Its focused state doesn't affect the decision.
    // 
    // This specially colored border is the right button's left border.  
    // That's the shared border (the left button has no right border).
    
    .oj-buttonset:not(.oj-button-half-chrome) .oj-button:not(.oj-buttonset-first).oj-active {
        @include oj-ltr() {
            border-left-color: $buttonInternalBorderColorActive;
        }
    }

    .oj-buttonset:not(.oj-button-half-chrome) .oj-button:not(.oj-buttonset-last).oj-active {
         @include oj-rtl() {
            border-left-color: $buttonInternalBorderColorActive;
         }
    }
	
    // affects both selected and selectedHovered as desired
    .oj-buttonset:not(.oj-button-half-chrome) .oj-button:not(.oj-buttonset-first).oj-selected {
        @include oj-ltr() {
            border-left-color: $buttonInternalBorderColorSelected;
        }
    }

    // affects both selected and selectedHovered as desired
    .oj-buttonset:not(.oj-button-half-chrome) .oj-button:not(.oj-buttonset-last).oj-selected {
         @include oj-rtl() {
            border-left-color: $buttonInternalBorderColorSelected;
         }
    }
	
    .oj-buttonset:not(.oj-button-half-chrome) .oj-button:not(.oj-buttonset-first).oj-selected.oj-disabled {
        @include oj-ltr() {
            border-left-color: $buttonInternalBorderColorSelectedDisabled;
        }
    }

    .oj-buttonset:not(.oj-button-half-chrome) .oj-button:not(.oj-buttonset-last).oj-selected.oj-disabled {
         @include oj-rtl() {
            border-left-color: $buttonInternalBorderColorSelectedDisabled;
         }
    }
  }
}
