@import "../utilities/oj.utilities.urls";
@import "../utilities/oj.utilities.math";

// This is the variable file for the Oracle Alta look and feel.

// The variables in the file are (imperfectly) organized in some general categories
// - LOGISTICAL: these variables are more logistical, for example 
//       you can set the path to your image directory
// - ABSTRACT: in general these "abstract" variables are not used directly
//       in the widget files, rather they are referred to by 
//       other variables.
// - GENERAL: these variables are used broadly in the widget files. 
//       Examples are text, link and icon colors.
// - CATEGORY AND WIDGET: these variables are widget 
//        or category specific, for example button or form control variables.
// - OPTIMIZATIONS: these variables are for optimizations, for example they
//       control things like whether to include certain classes in the output.


//----------------------------------------------------------------
//  LOGISTICAL VARIABLES
//----------------------------------------------------------------

// PATHS
//----------------------------------
// these paths should be relative to the generated css file

// path to alta images 
$imageDir: "images/" !default;

// path to alta (icon) fonts 
$fontDir: "fonts/" !default;

// path to common images (images shared across themes)
$commonImageDir: "../common/images/" !default;


// DIRECTION
//----------------------------------

// Accepted values of $textDirection are null, ltr, rtl
//    - null means ouput for both directions (default)
//    - ltr means output left to right only 
//    - rtl means output right to left only
//
// By default we support right to left without 
// switching out the css file as long as dir="rtl"
// is set on the html tag. However if you'd prefer 
// to generate one css file per direction you can 
// also set "$textDirection" to either "rtl" or "ltr".
$textDirection: null !default;


// COMPATIBILITY
//----------------------------------

// when $allowTagSelectors is true JET directly styles certain tags like 
// <p> <a> <h1>, etc. However for developers trying to mix JET with other 
// technologies styling these tags directly could cause issues on other parts of the page. 
// In that case set $allowTagSelectors: false;.
// See the "compatibility" section of the theming documentation for more information
$allowTagSelectors: true !default;



// INITIAL VISIBILITY
//----------------------------------

// when $initialVisiblity is hidden then visibility: hidden is set on the dom until the
// component is initialized. This reduces the unstyled dom seen by the user during page load.
$initialVisibility: hidden !default;



//----------------------------------------------------------------
// "ABSTRACT" STYLING 
//     in general these "abstract" variables are not used directly
//     in the widget files, rather they are referred to by 
//     other variables.
//----------------------------------------------------------------


// interaction state colors 
//----------------------------------

// $interaction1Color is often used to
// indicate a selected state.
$interaction1Color: #0572ce !default;  

// $interaction2Color and $interaction2Color are often 
// used to indicate hover or focus on a row or item
$interaction2Color: #ebeced !default;
$interaction3Color: #e4f0fa !default;  

// $interaction4Color is often used to
// indicate active or selected on a row or item
$interaction4Color: #cfe8fc !default;   

// $interaction5Color and $interaction6Color are
// often used to indicate state in a "header",
// for example a column header
$interaction5Color: #d6d7d8 !default;
$interaction6Color: #dae9f5 !default;  



// background colors
//----------------------------------
$background1Color: #ffffff !default;
$background2Color: #f9f9f9 !default;
$background3Color: #fcfdfe !default;
$background4Color: #f0f0f0 !default; 
$background5Color: #fafafa !default;
$background6Color: #e4e8ea !default;

// border colors
//----------------------------------
$border1Color:       #d6dfe6 !default;
$border2Color:       #d9dfe3 !default; 
$border3Color:       #c4ced7 !default;
$border4Color:       #dfe4e7 !default;
$border5Color:       #eeeeee !default;
$border6Color:       #000000 !default;
$border7Color:       #ffffff !default;
$border8Color:       #4f4f4f !default;

//----------------------------------------------------------------
// GENERAL STYLING
//       these variables are used broadly in the widget files
//----------------------------------------------------------------

// font 
//----------------------------------

// font family 
$fontFamily: "Helvetica Neue", Helvetica, Arial, sans-serif !default;

// font size

// $rootFontSize is only used on the html element 
// in order to support using rem units. 
//
// If you have $allowTagSelectors set to false you can 
// use the class oj-html to get the JET html tag styling. 
// If you are not generating classes for the html element in JET
// you can still use rem's if you can set the font size on 
// the html element with your own class or inline style.
//
// The browser usually uses 16px and the Alta default is 14px. 
// Therefore set $rootFontValue to .875em to get 14px;
$rootFontSize:    .875em !default;    // 14px

$fontSize:        1rem !default;      // 14px
$smallFontSize:   .857rem !default;   // 12px when root 14px
$mediumFontSize:  1.143rem !default;  // 16px when root 14px
$largeFontSize:   1.286rem !default;  // 18px when root 14px
$largestFontSize: 1.429rem !default;  // 20px when root 14px


// text colors
//----------------------------------
$textColor:             #333333 !default;                                
$primaryTextColor:      darken($textColor, 25%) !default;  // = #000000;  
$secondaryTextColor:    lighten($textColor, 10%) !default; // = #454545;  
$tertiaryTextColor:     lighten($textColor, 25%) !default; // = #737373; 
$formControlLabelColor: #4f4f4f !default;   
$headerTextColor:       #252525 !default;    
$contrastTextColor:     #ffffff !default;  
$textColorDisabled:     #9e9e9e !default; 

// link colors
//----------------------------------
$linkTextColor:         #045fab !default;   
$linkTextColorVisited:  $linkTextColor !default; 
$linkTextColorDisabled: $textColorDisabled !default;



// interaction cue colors 
//----------------------------------
$colorRequired: $interaction1Color !default;

// icon colors
//----------------------------------
// these are used to control the color of icon font icons
$iconColor:         $textColor !default;
// colors for clickable icons below
$iconColorDefault:  #878c90 !default;
$iconColorHover:    #85bbe7 !default;
$iconColorActive:   $interaction1Color !default;
$iconColorSelected: $iconColorActive !default;
$iconColorDisabled: #d4d6d7 !default;


// border color
//----------------------------------
$borderColorError:   #dd6666 !default;
$borderColorWarning: #ffd699 !default;
$helpBorderColor: lighten($formControlLabelColor, 1%) !default; // = #525252


// messaging
//----------------------------------

// We want to keep the background colors as they are in the UX spec and not
// derive them from border colors since bg colors need to pass high contrast
// mode - that is, the bg color needs to be light enough 
// so the text on them can be read easily.

// we want the same lightness adjustment for all msg types, and 4% is
// a good compromise that works for all. The calculated border-color doesn't
// exactly match the ux alta spec as it is today.
$messageInlineBorderColorLightnessAdjustment: 4% !default;

// ux alta spec for error: background-color: #FFF3F3; border-color: #ffe6e6;
$messageInlineBgColorError: #FFF3F3 !default;       
$messageInlineBorderColorError: 
  darken($messageInlineBgColorError, $messageInlineBorderColorLightnessAdjustment) !default;                        

// ux alta spec for warning: background-color: #fff2de; border-color: #ffdfae;
$messageInlineBgColorWarning: #fff2de;
$messageInlineBorderColorWarning:  
  darken($messageInlineBgColorWarning, $messageInlineBorderColorLightnessAdjustment) !default;

// ux alta spec for confirmation: background-color: #E5F6EA;border-color:#ddf7e5;
$messageInlineBgColorConfirmation: #E5F6EA !default;
$messageInlineBorderColorConfirmation: 
  darken($messageInlineBgColorConfirmation, $messageInlineBorderColorLightnessAdjustment) !default;

// ux alta spec for info: background-color: #EAF5FB;border-color: #D6EFFB;
$messageInlineBgColorInfo: #EAF5FB !default;
$messageInlineBorderColorInfo:  
  darken($messageInlineBgColorInfo, $messageInlineBorderColorLightnessAdjustment) !default;

// drag and drop
//----------------------------------
$dropTarget1Color:  #D9F4FA !default;
$dropTarget2Color:  #C3EAF3 !default;


// border radius
//----------------------------------
$smallBorderRadius:  1px !default;
$mediumBorderRadius: 2px !default;
$largeBorderRadius:  3px !default;


// shadow
//----------------------------------
$boxShadowColor: #000000 !default;
$smallBoxShadow:  1px 1px 3px 0 transparentize($boxShadowColor, .65) !default; 
$mediumBoxShadow: 1px 1px 5px 0 transparentize($boxShadowColor, .60) !default;
$largeBoxShadow:  1px 1px 10px 0 transparentize($boxShadowColor, .55) !default;


// overlay
//----------------------------------
// this is used for something like a modal dialog to overlay the
// rest of the screen, indicating it's not reachable
$overlayBgColor:     #000000 !default;

// z-index hierarchy 
//----------------------------------
$defaultZindex:     1 !default;

$dialogZindex:     1050 !default;

// ojPopup option tail=simple
$noteWindowZindex: 1030 !default;

// ojPopup option tail=none and popups used to collect immediate feedback: inputdatatime, menu, listbox (ojSelect, ojCombobox)
$popupZindex:      1000 !default;

// ojDialog port from jquery resizable.  Assigned to resize grippers on the dialogs corners and edges.
$resizableZindex:  900  !default;

// wrappable
//----------------------------------
// this margin is needed so that if components are laid out
// next to one another and wrap onto a new line there is 
// some vertical space between the "rows". For example when 
// several buttons are laid out next to each other on a small screen 
// some may wrap onto a new line, this puts some space
// between these buttons.  
$wrappableMarginBottom:  4px !default;

// disabled
//----------------------------------
// alta uses color and not opacity to indicate disabled
$opacityDisabled: null !default;

// animation
//----------------------------------
$animationDuration: .5s !default;


//----------------------------------------------------------------
// CATEGORY AND WIDGET VARIABLES
//----------------------------------------------------------------


// BODY
//----------------------------------------------------------------
// to remove background image use $bodyBgImage: none;
$bodyBgImage:   oj-image-url('texture.png') !default;
$bodyBgColor:   $background1Color !default;
$bodyTextColor: $textColor !default;



// PANEL
//----------------------------------------------------------------

// panel defaults:
$panelBorderColor: $border1Color !default;
$panelBgColor:     $background1Color !default;
$panelPadding:     .8571rem !default; // 12px when root is 14px


// panel alternatives
$panel1BgColor:     #eff2f5 !default;
$panel1BorderColor: $panelBorderColor !default;

// most panels determine their border colors by changing 
// the saturation/lightness of their background colors
$panelBorderColorSaturationAdjustment: 5% !default;
$panelBorderColorLightnessAdjustment: -5% !default;

$panel2BgColor:     #e8f2fb !default;
$panel2BorderColor: adjust-color($panel2BgColor,
                                 $lightness: $panelBorderColorLightnessAdjustment, 
                                 $saturation: $panelBorderColorSaturationAdjustment) !default;

$panel3BgColor:     #fef9e8 !default;
$panel3BorderColor: adjust-color($panel3BgColor,
                                 $lightness: $panelBorderColorLightnessAdjustment, 
                                 $saturation: $panelBorderColorSaturationAdjustment) !default;

$panel4BgColor:     #ffe4e1 !default;
$panel4BorderColor: adjust-color($panel4BgColor,
                                 $lightness: $panelBorderColorLightnessAdjustment, 
                                 $saturation: $panelBorderColorSaturationAdjustment) !default;

$panel5BgColor:     #fce8fe !default;
$panel5BorderColor: adjust-color($panel5BgColor,
                                 $lightness: $panelBorderColorLightnessAdjustment, 
                                 $saturation: $panelBorderColorSaturationAdjustment) !default;


// HEADERS
//----------------------------------------------------------------
// header text color defined above, look for "text colors"
$headerFontWeight:      bold !default;
$headerBorderColor:     $border2Color !default;  

// the background variables below are for a header "container", 
// like the title bar of a dialog or an accordion header
$headerBgColor:         $background4Color !default;  
$headerBgColorDisabled: $background5Color !default; 
$headerBgImage:         null; 


// WINDOW
//----------------------------------------------------------------
$windowBorderColor: $border3Color !default;
$windowBgColor:     $background2Color !default;

// DIALOG
//----------------------------------------------------------------
$dialogBorderColor:  $windowBorderColor !default;
$dialogBgColor:      $windowBgColor !default;

// NOTE WINDOW
//----------------------------------------------------------------
$noteWindowBorderColor:      $windowBorderColor !default;
$noteWindowBgColor:          $windowBgColor !default;

// tail width and height
$noteWindowTailSimpleWidth:  14px !default;
$noteWindowTailSimpleHeight: 13px !default;

// POPUP
//----------------------------------------------------------------
// popups are sometimes called a "dropdown" or "inline selector"
$popupBorderColor:  $windowBorderColor !default;
$popupBgColor:      $background1Color !default;


// MENU
//----------------------------------------------------------------
$menuBorderColor:       $popupBorderColor !default;
$menuBgColor:           $popupBgColor !default;
$menuItemBgColorFocus:  $interaction2Color !default;

// LISTBOX
//----------------------------------------------------------------
// listbox values used in drop down for 
// inputTime, select, combobox
$listboxBgColorFocus: $interaction2Color !default;

// padding for a listbox item
$listboxItemPadding: 5px  !default; 

// listbox data can be a tree, meaning the item is nested.
// this is the additional padding per nesting level
$listboxIndentWidth: 15px !default;


// DATEPICKER
//----------------------------------------------------------------
$datepickerBgColorSelected:  $interaction1Color !default;
$datepickerBorderColorToday: $interaction1Color !default;


// FORM CONTROLS 
//----------------------------------------------------------------

// form control dimensions
//----------------------------------

// controls the height of an input
$formControlHeight: 2.286rem !default; // 32px when base font 14px



// On form controls we use a width of 100% and then set a max and  
// min width so that when there's less room for the form control it 
// can automatically get smaller instead of overflowing its boundaries. 
// This forces us to set some sort of default max-width
// which can be overridden on the instance by setting a style
// or class using the rootAttributes option.
//
// In alta there are large width form controls, like input text, and
// medium width form controls, like input number
$formControlLargeMaxWidth:  18em !default;
$formControlMediumMaxWidth: 15em !default;
$formControlMinWidth:       8em !default;


// form control common
//----------------------------------
$formControlBorderRadius:    $mediumBorderRadius !default;

// controls the horizontal padding inside an input
$formControlPaddingHorizontal: 5px !default; 

// messaging border
$formControlMessagingBorderWidth: 2px !default;

// font size
$formControlFontSize: $fontSize !default;


// form control states
//----------------------------------
//default
$formControlBgColor:             $background3Color !default;
$formControlValueColor:          $textColor !default; 
$formControlBorderColor:         $border4Color !default;

//readonly
$formControlValueColorReadOnly:  $textColor !default; 

//disabled
$formControlBgColorDisabled:     #efeff1 !default; 
$formControlValueColorDisabled:  $textColorDisabled !default;
$formControlBorderColorDisabled: $formControlBgColorDisabled !default;
$formControlOpacityDisabled:     $opacityDisabled   !default;

// placeholder
$formControlPlaceholderColor: $tertiaryTextColor !default; 
$formControlPlaceholderFontStyle: italic;

// form labels
//----------------------------------
// label text color defined above, look for "text colors"
$formControlLabelFontWeight: bold !default;

// top aligned labels:
//    by default labels are dislplay: block and therefore
//    render on top of the field. This variable controls
//    the vertical spacing between labels and fields 
$formControlLabelMarginBottom: .25em !default;


// inline labels
//----------------------------------

// gutter (padding) between the inline label and the control
$formControlLabelInlineGutter:     .5em !default;

// top margin on the inline label, generally this
// distance is to align the label text with an input's text.
// Note that there is an additional inline label var $formLayoutLabelInlineMarginTop
$formControlLabelInlineMarginTop:  .55em !default;

// form layout
//----------------------------------

// These variables are used to set the column-width property
// in .oj-form-cols and .oj-form-cols-labels-inline.
// These classes use css multi column layout, see:
// http://dev.w3.org/csswg/css-multicol/ 
$formLayoutColumnWidth:             1.025 * $formControlLargeMaxWidth !default;
$formLayoutLabelsInlineColumnWidth: 22rem !default;

// In a form layout this is the space expected between 
// form controls in different rows
$formLayoutMarginBottom: 10px !default;

// inline label in a oj-row > oj-col; we do not float, thus we need line-height
// to maintain label's height, and we need a different top margin for this case.
$formLayoutLabelInlineMarginTop: .4em !default;

// BUTTONS 
//----------------------------------------------------------------

$buttonFontWeight:   bold !default;
$buttonBorderRadius: $mediumBorderRadius !default;
$buttonCursor:       default !default;

// we set button and form control heights to the same value so they will line up nicely
$buttonHeight:       $formControlHeight !default;
$buttonSmallHeight:  $buttonHeight * .875 !default;
$buttonLargeHeight:  $buttonHeight * 1.3125 !default;
$buttonXlargeHeight: $buttonHeight * 1.5 !default;


// button padding
//----------------------------------
// Horiz space between text and edge of button when no intervening icon.
$buttonTextToEdgePadding: 0.857rem !default;   
$buttonLargeTextToEdgePadding: 1.43rem !default;

// Horiz space between text and icon.
$buttonIconToTextPadding: 0.43rem !default;

// Horiz space between icon and edge of button when text also showing.
$buttonIconToEdgePadding:      .7rem !default;   
$buttonLargeIconToEdgePadding: 1.071rem !default;

// Horiz space between icon and edge of button when icon only.
$buttonIconOnlyPadding:       .5rem !default;   
$buttonSmallIconOnlyPadding:  .357rem !default;   
$buttonLargeIconOnlyPadding:  .857rem !default; 
$buttonXlargeIconOnlyPadding: 1rem !default;



// button states
//----------------------------------
// default
$buttonBgColor:                   $background6Color !default;
$buttonTextColor:                 $primaryTextColor !default;
$buttonIconColor:                 $iconColorDefault !default;
$buttonBorderColor:               $border3Color !default;
$buttonBgImage:                   linear-gradient(to bottom, 
                                                  #ffffff 0%, 
                                                  #f1f3f4 3.64%, 
                                                  #e8ebed 50%,
                                                  $buttonBgColor 100%) !default;    
$buttonTextShadow:                null !default; 
$buttonBoxShadow:                 null !default; 

// hover
$buttonBgColorHover:              #f7f8f9 !default;
$buttonTextColorHover:            $interaction1Color !default;
$buttonIconColorHover:            $iconColorHover !default;
$buttonBorderColorHover:          $buttonBorderColor !default;
$buttonBgImageHover:              null !default;                     
$buttonTextShadowHover:           null !default; 
$buttonBoxShadowHover:            null !default; 

// active
$buttonBgColorActive:             $interaction1Color !default; 
$buttonTextColorActive:           $contrastTextColor !default;
$buttonIconColorActive:           $buttonTextColorActive !default;
$buttonBorderColorActive:         $buttonBgColorActive !default;
$buttonInternalBorderColorActive: $buttonBorderColor !default;
$buttonBgImageActive:             null !default;                     
$buttonTextShadowActive:          null !default; 
$buttonBoxShadowActive:           null !default; 
$buttonOpacityActive:             null !default;

// selected - default to use active values
$buttonBgColorSelected:           $buttonBgColorActive !default; 
$buttonTextColorSelected:         $buttonTextColorActive !default;
$buttonIconColorSelected:         $buttonIconColorActive !default;
$buttonBorderColorSelected:       $buttonBorderColorActive !default;
$buttonInternalBorderColorSelected: $buttonInternalBorderColorActive !default;
$buttonBgImageSelected:           $buttonBgImageActive !default;                   
$buttonTextShadowSelected:        $buttonTextShadowActive !default; 
$buttonBoxShadowSelected:         $buttonBoxShadowActive !default; 

// selected and hovered
$buttonTextColorSelectedHover:    $buttonIconColorHover !default;
$buttonIconColorSelectedHover:    $buttonIconColorHover !default; 

// disabled
$buttonBgColorDisabled:           #f4f6f7 !default; 
$buttonTextColorDisabled:         $textColorDisabled !default;
$buttonIconColorDisabled:         $iconColorDisabled !default;
$buttonBorderColorDisabled:       #e0e6eb !default;  
$buttonOpacityDisabled:           $opacityDisabled !default;

// disabled and selected
$buttonTextColorSelectedDisabled:            $buttonTextColorSelected !default;
$buttonIconColorSelectedDisabled:            $buttonTextColorSelectedDisabled !default; 
$buttonBgColorSelectedDisabled:              $buttonIconColorDisabled !default;
$buttonBorderColorSelectedDisabled:          $buttonBgColorSelectedDisabled !default;
$buttonInternalBorderColorSelectedDisabled:  $buttonBorderColorDisabled !default;



// alternate button colors
//----------------------------------
$buttonContrastTextColor: $contrastTextColor !default;
$buttonPrimaryColor:      $interaction1Color !default;
$buttonConfirmColor:      #008b32 !default;



// TOOLBAR
//----------------------------------------------------------------
$toolbarBorderColor:  $panelBorderColor !default; 
$toolbarBgColor:      null !default; 
$toolbarBorderWidth:  0 !default;


// COLLAPSIBLE
//----------------------------------------------------------------
$collapsibleAnimationDuration: $animationDuration !default;

// ACCORDION
//----------------------------------------------------------------

// accordion panel area
//------------------------
$accordionPanelBgColor:               $panelBgColor !default;
$accordionPanelBorderColor:           $panelBorderColor !default;

// TABS
//----------------------------------------------------------------

// tabs content area
//----------------------------------
$tabsPanelBgColor:      $panelBgColor !default;
$tabsPanelBorderColor:  $panelBorderColor !default;

// individual tabs
//----------------------------------
$tabsNavTextColor:                 $linkTextColor !default;
$tabsNavBorderRadius:              0 !default;

// selected
$tabsNavBorderColorSelected:       $border3Color !default; 

// in alta this color and border width are used at the top 
// of the selected tab when the tabs are horizontal 
// (or on the start side when the tabs are vertical)
$tabsNavAccentBorderColorSelected: $interaction1Color !default;
$tabsNavAccentBorderWidthSelected: 3px !default;


// PROGRESSBAR
//----------------------------------------------------------------
$progressbarBgColor:      $background3Color !default;
$progressbarValueBgColor: $interaction1Color !default;
$progressbarBorderColor:  $border4Color !default;

// TRAIN
//----------------------------------------------------------------

// unvisited
$trainBgColor:              $buttonBgColor !default;
$trainBorderColor:          $buttonBorderColor !default;

// disabled
$trainBgColorDisabled:      $buttonBgColorDisabled !default;
$trainBorderColorDisabled:  $buttonBorderColorDisabled !default;

// hover
$trainBgColorHover:         $iconColorHover !default;
$trainBorderColorHover:     $trainBgColorHover !default;

// selected
$trainBgColorSelected:      $iconColorSelected !default;
$trainBorderColorSelected:  $trainBgColorSelected !default;

// visited
$trainBgColorVisited:       $background1Color !default;
$trainBorderColorVisited:   $trainBorderColorSelected !default;
$trainLabelColorVisited:    #72007C !default;

// Connector
$trainConnectorBgColor:    $background4Color !default;
$trainConnectorBgColorSelected: $interaction5Color !default;

// the height of the line connector between buttons
$trainConnectorHeight: 8px !default;

// the default width of a step
$trainStepWidth: 100px !default;

// the diameter of the "button" representing a stop
$trainButtonDiameter: 14px !default;

// the diameter of the connector circle around the button
$trainButtonConnectorDiameter: $trainButtonDiameter + 8px !default;


//TREE
//----------------------------------------------------------------

$treeAnimationDuration: $animationDuration !default;

// text
$treeTextColor:                     $linkTextColor !default;

// node bg
$treeNodeBgColorHover:              transparent !default; 
$treeNodeBgColorSelected:           $interaction4Color !default;  
$treeNodeBgColorHoverSelected:      $interaction4Color !default;
$treeNodeBgColorSelectedInactive:   $interaction3Color !default;

// node text border
$treeNodeBorderColorHover:            $border8Color !default; 
$treeNodeBorderColorSelected:         $treeNodeBgColorSelected !default; 
$treeNodeBorderColorHoverSelected:    $treeTextColor !default;
$treeNodeBorderColorSelectedInactive: #bfd4e5 !default;

// Dnd
$treeDndMarkerLineColor:      $interaction1Color !default;


// DATA GRID AND TABLE
//----------------------------------------------------------------
// Default 
$dataGridBorderColor:                       $border1Color !default; 
$dataGridBgColor:                           #f7f9fc !default;

// Headers
$dataGridHeaderPadding:                     0.5em !default;
$dataGridHeaderFontWeight:                  $headerFontWeight !default;
$dataGridHeaderTextColor:                   $primaryTextColor !default;
$dataGridHeaderFontSize:                    $fontSize !default;
// Headers - Default
$dataGridHeaderBgColor:                     #f2f4f7 !default;  
$dataGridHeaderBorderColor:                 $dataGridBorderColor !default;
// Headers - Hover
$dataGridHeaderBgColorHover:                $interaction5Color !default;
// Headers - Focus
$dataGridHeaderBgColorFocus:                $interaction6Color !default;
// Headers - Selected 
$dataGridHeaderBgColorSelected:             #b9dfff !default;  
// Headers - Selected Inactive (selected but focus outside the component)
$dataGridHeaderBgColorSelectedInactive:     $interaction6Color !default;  

// Cells  
$dataGridCellPadding:                       $dataGridHeaderPadding;
$dataGridCellTextColor:                     $textColor !default; 
// Cells - Default
$dataGridCellBorderColor:                   $border5Color !default;
$dataGridCellBgColor:                       $background1Color !default;
$dataGridCellBandedBgColor:                 $background2Color !default;
// Cells - Hover
$dataGridCellBgColorHover:                  $interaction2Color !default;
// Cells - Focus 
$dataGridCellBgColorFocus:                  $interaction3Color !default;  
// Cells - Selected 
$dataGridCellBgColorSelected:               $interaction4Color !default;
// Cells - Selected Inactive (selected but focus outside the component)
$dataGridCellBgColorSelectedInactive:       $interaction3Color !default;

// Rows - Height
$dataGridRowHeight:                         2.25em !default;

// ROWEXPANDER
//----------------------------------------------------------------
$rowExpanderIndentWidth:  16px;


// PAGING CONTROL
//----------------------------------------------------------------

// padding between various elements of the paging control
$pagingControlPadding: 5px !default;

// LISTVIEW
//----------------------------------------------------------------

$listViewAnimationDuration: $animationDuration !default;

// MASONRY LAYOUT
//----------------------------------------------------------------

// duration of a masonryLayout transition
$masonryLayoutTransitionDuration:     $animationDuration !default;
// duration of a faster masonryLayout transition
$masonryLayoutTransitionDurationFast: $masonryLayoutTransitionDuration/2 !default;
// margin around a masonryLayout tile
$masonryLayoutTileMargin:             8px !default;
// width of a 1x1 masonryLayout tile, not including margin
$masonryLayoutTileWidth:              170px !default;
// height of a 1x1 masonryLayout tile, not including margin
$masonryLayoutTileHeight:             170px !default;


// NAVIGATIONLIST
//----------------------------------------------------------------

// for text/icons navlist directly uses $link* and $iconColor* variables

// states
//----------------------------------
// hover
$navigationListItemBorderColorHover:    $iconColorHover !default;
$navigationListItemBgColorHover:        $interaction2Color !default;

// selected
$navigationListItemBorderColorSelected: $interaction1Color !default;
$navigationListItemBgColorSelected:     $interaction3Color !default;

//Focus 
$navigationListItemOutlineColorFocus:   $border8Color !default;


// icon only
//----------------------------------
// icon-only
$navigationListItemIconOnlyBgColorSelected: $interaction1Color !default;
$navigationListItemIconOnlyBgColorHover:    $interaction2Color !default;


// dividers
//----------------------------------

// item border color - used for sliding
$navigationListItemBorderColor:      $border5Color !default;
// divider - used between text items when horizontal
$navigationListItemDividerColor:     $border2Color !default;
// category divider - used between categories
$navigationListCategoryDividerColor: $border1Color !default;


// sizing
//----------------------------------
// Not applicable to icon-only or sliding
$navigationListItemStartEndPadding:      1.072rem !default; //15px
$navigationListIconToTextPadding:            0.714rem; // 10px
$navigationListItemAccentBorderWidth:    3px !default;


// sliding navlist
//----------------------------------

// for the sliding toolbar and hierarchical menu area 
// navigationList uses various $toolbar* and $tree* variables

//sliding navigation list toolbar 
$navigationListToolbarBgColor:          $background5Color !default;

//Hierarchical menu
$navigationListHierarchicalMenuBgColor: $background2Color !default;




// GRID LAYOUT and RESPONSIVE
//----------------------------------------------------------------

// grid layout
//----------------------------------------------------------------

// the number of pixels between column content
$gridColumnGutter: 20px !default;

// the number of columns in the grid system, a number divisible by 2, 3, and 4 is preferred
// in order to easily get columns that take up 50%, 33.3%, or 25% of the screen.
$gridTotalColumns: 12 !default;


// app content max width
//----------------------------------
// $appContentMaxWidth is the maximum width an application is designed for. 
// While monitors can be very large, many applications are not designed 
// to be infinitely wide. This variable is used to set the max-width property on 
// the grid's .oj-row, which is in turn used for responsive page layout.  
//
// When the screen is larger than this width there will be empty margins 
// on either side taking up the rest of the screen. 
//
// If the application has no maximum content width then set this value to 
// 'none', for example:
//    $appContentMaxWidth: none;
//
// Note that this value is used in the responsive screen size variables below.
$appContentMaxWidth: 1440px !default;


// responsive screen sizes
//----------------------------------
$screenSmallRange:  0, 767px !default;
$screenMediumRange: 768px, 1023px !default;
$screenLargeRange:  1024px, 1279px !default;
$screenXlargeRange: 1280px, $appContentMaxWidth !default;


// responsive media queries
//----------------------------------

// You will see "print" on some media queries below. 
// By default printing portrait is treated as a medium screen and 
// printing landscape is treated as a large screen.

// the $responsiveQueryXYZ variables can be set to 'none' if 
// you don't want to render a particular set of classes, 
// for example $responsiveQueryPrint can be set to 'none' 
// if print only classes aren't desired
// Or if you don't want xlarge classes you could set:
//    $screenLargeRange:          1024px, $appContentMaxWidth !default;
//    $screenXlargeRange:         none;
//    $responsiveQueryLargeOnly:  none;
//    $responsiveQueryXlargeUp:   none;


$responsiveQueryPrint:      "print" !default;

$responsiveQuerySmallUp:    "print, screen" !default;
$responsiveQuerySmallOnly:  "screen and (max-width: #{upper-bound($screenSmallRange)})" !default;

$responsiveQueryMediumUp:   "print, screen and (min-width: #{lower-bound($screenMediumRange)})" !default;
$responsiveQueryMediumOnly: "print and (orientation: portrait), screen and (min-width: #{lower-bound($screenMediumRange)}) and (max-width: #{upper-bound($screenMediumRange)})" !default;
$responsiveQueryMediumDown: "print and (orientation: portrait), screen and (max-width: #{upper-bound($screenMediumRange)})" !default;

$responsiveQueryLargeUp:    "print and (orientation: landscape), screen and (min-width: #{lower-bound($screenLargeRange)})" !default;
$responsiveQueryLargeOnly:  "print and (orientation: landscape), screen and (min-width: #{lower-bound($screenLargeRange)}) and (max-width: #{upper-bound($screenLargeRange)})" !default;
$responsiveQueryLargeDown:  "print and (orientation: landscape), screen and (max-width: #{upper-bound($screenLargeRange)})" !default;

$responsiveQueryXlargeUp:   "screen and (min-width: #{lower-bound($screenXlargeRange)})" !default;

// by default there is no xxl screen range variable. 
// to add support for an xxl range you can do something like
// the following in your settings file:
//   $screenXXlargeRange:         1441px, $appContentMaxWidth !default;
//   $responsiveQueryXlargeOnly:  "screen and (min-width: #{lower-bound($screenXLargeRange)}) and (max-width: #{upper-bound($screenXLargeRange)})";
//   $responsiveQueryXlargeDown:  "screen and (max-width: #{upper-bound($screenXLargeRange)})";
//   $responsiveQueryXXlargeUp:   "screen and (min-width: #{lower-bound($screenXXlargeRange)})";
$responsiveQueryXlargeOnly: null !default;
$responsiveQueryXlargeDown: null !default;
$responsiveQueryXXlargeUp:  null !default;


// the default point at which we consider a screen a high resolution
// (or retina) display.
//
// The value is set to 1.5 because as of 2014 there's a lot 
// of Android devices out there that are half-way between the 
// legacy screen resolutions and retina (aka "xhdpi" in Google's terminology) 
// they use a 1.5 factor so the default device pixel ratio is 1.5
//
// NOTE: in order to allow stand alone use of these utility mixins
// this variable is also defined in _oj.utilities.icons.scss. 
// Because of the !default, the actual value will be the value 
// in the file loaded first.
$highResolutionDevicePixelRatio: 1.5 !default;


// Note: you'll see "screen and .." in the media queries above. 
// we wanted to do something like
//     "(not print) and (min-width: #{$screen-xlarge})", 
// However that doesn't seem to be supported, the "not" negates the entire query. 
// So we're forced to enumerate the media types we do want to 
// support instead of exclude the ones we don't. Hence the use of
// "screen and ..."


// optimizations: variables for defaulting whether certain types of 
// responsive helper classes are generated
//
// $responsiveGenerateHide:                  generate classes like .oj-md-hide
// $responsiveGenerateTextAlignEnd:          generate classes like .oj-md-text-align-end
// $responsiveGenerateFloatStart:            generate classes like .oj-md-float-start
// $responsiveGenerateFloatEnd:              generate classes like .oj-md-float-end
// $responsiveGenerateJustifyContentFlexEnd: generate classes like .oj-md-justify-content-flex-end
// $responsiveGenerateJustifyContentCenter:  generate classes like .oj-md-justify-content-center
$responsiveGenerateHide:                  true !default;
$responsiveGenerateTextAlignEnd:          true !default;
$responsiveGenerateFloatStart:            true !default;
$responsiveGenerateFloatEnd:              true !default;
$responsiveGenerateJustifyContentFlexEnd: true !default;
$responsiveGenerateJustifyContentCenter:  true !default;



// optimizations: there are a lot of different grid classes, some of which you may not need. 
// These variables control whether certain types of grid classes are generated
//
//
// $gridGenerateBasics:    generate basic grid classes like .oj-sm-1, .oj-sm-2, etc.
// $gridGenerateOffsets:   generate offset grid classes like 
//                         .oj-md-offset-1, .oj-md-offset-2, etc.
//                         Note that offset classes are not generated for small
//                         screens even when the variable is true.
// $gridGenerateCentering: generate centering grid classes like .oj-sm-center
// $gridGenerateOddEven:   generate odd and even grid classes like .oj-md-odd-cols-1, 
//                         .oj-md-odd-cols-2, etc.
// $gridGenerateDeprecatedOrdering:  
//                         generate push/pull grid classes like 
//                         .oj-md-pull-1, .oj-md-push-3, etc. In the future we expect to switch
//                         to a flexbox implementation of the grid, and the push/pull classes will 
//                         not be forward compatible, therefore by default these are not enabled.
//                         If you use the push/pull classes you will need to change your pages when
//                         we change to the flexbox implementation.
$gridGenerateBasics:             true !default;
$gridGenerateOffsets:            true !default;
$gridGenerateCentering:          true !default;
$gridGenerateOddEven:            true !default;
$gridGenerateDeprecatedOrdering: false !default;

// SLIDER
//----------------------------------------------------------------

$sliderThumbDiameter:  	  24px !default;
$sliderThumbBorderWidth:	2px !default; 
$sliderBarThickness:  	  4px !default;

// default
$sliderThumbBorderColor:         #b2bcc4 !default;
$sliderThumbBgColor: 	           $background1Color !default;
$sliderBarBgColor:               $interaction5Color !default;
$sliderBarValueBgColor:           $interaction1Color !default;

// hover
$sliderThumbBgColorHover:        $interaction2Color !default;

// active
$sliderThumbBgColorActive:       $sliderThumbBgColorHover !default;

// disabled
$sliderThumbBgColorDisabled:     $textColorDisabled !default;  
$sliderBarValueBgColorDisabled:  $textColorDisabled !default;  

//SWITCH
//----------------------------------------------------------------
// DEFAULT
$switchTrackBgColor:                     $background3Color !default;
$switchTrackBorderColor:                 $border3Color !default;
$switchThumbBgColor:                     $background3Color !default;
$switchThumbBorderColor:                 #b2bcc4 !default;

// SELECTED
$switchTrackBgColorSelected:             $interaction1Color !default;
$switchTrackBorderColorSelected:         $switchTrackBgColorSelected !default;
$switchThumbBgColorSelected:             $background1Color !default;
$switchThumbBorderColorSelected:         $switchThumbBgColorSelected !default;

// HOVER
$switchTrackBgColorHover:                $iconColorDisabled !default;
$switchTrackBorderColorHover:            $switchTrackBgColorHover !default;
$switchThumbBgColorHover:                $switchThumbBgColor !default;
$switchThumbBorderColorHover:            $switchThumbBorderColor !default;

// HOVER SELECTED
$switchTrackBgColorSelectedHover:        $iconColorHover !default;
$switchTrackBorderColorSelectedHover:    $switchTrackBgColorSelectedHover !default;
$switchThumbBgColorSelectedHover:        $switchThumbBgColor !default;
$switchThumbBorderColorSelectedHover:    $switchThumbBorderColor !default;

// ACTIVE
$switchTrackBgColorActive:               $switchTrackBgColor !default;
$switchTrackBorderColorActive:           $switchTrackBorderColor !default;
$switchThumbBgColorActive:               $switchThumbBgColor !default;
$switchThumbBorderColorActive:           $switchThumbBorderColor !default;

// ACTIVE SELECTED
$switchTrackBgColorSelectedActive:       $switchTrackBgColorSelected !default;
$switchTrackBorderColorSelectedActive:   $switchTrackBorderColorSelected !default;
$switchThumbBgColorSelectedActive:       $switchThumbBgColor !default;
$switchThumbBorderColorSelectedActive:   $switchThumbBorderColor !default;

// DISABLED
$switchTrackBgColorDisabled:             $interaction2Color !default;
$switchTrackBorderColorDisabled:         $switchTrackBgColorDisabled !default;
$switchThumbBgColorDisabled:             $iconColorDisabled !default;
$switchThumbBorderColorDisabled:         $switchThumbBgColorDisabled !default;

// DISABLED SELECTED
$switchTrackBgColorSelectedDisabled:     $switchThumbBgColorDisabled !default;
$switchTrackBorderColorSelectedDisabled: $switchTrackBgColorSelectedDisabled !default;
$switchThumbBgColorSelectedDisabled:     $switchTrackBgColorDisabled !default;
$switchThumbBorderColorSelectedDisabled: $switchThumbBgColorSelectedDisabled !default;

// TRACK HEIGHT/WIDTH
$switchTrackHeight: $formControlHeight !default;
$switchTrackWidth:  $switchTrackHeight * 1.625 !default;

// THUMB HEIGHT/WIDTH Enable, Disable, Active, Hover
$switchThumbHeight: calc(#{$switchTrackHeight} - 2px) !default;
$switchThumbSelectedHeight: calc(#{$switchTrackHeight} - 4px) !default;
$switchThumbActiveHoverWidth:  $switchTrackHeight * 1.1875 !default;

// THUMB SHADOW
$switchThumbShadow: 0 2px 2px -2px $boxShadowColor !default;

// DVT 
//----------------------------------------------------------------
$dvtAnimationDuration: $animationDuration !default;

// attribute group colors
//----------------------------------
$dvtCategory1Color: #267db3 !default;
$dvtCategory2Color: #68c182 !default;
$dvtCategory3Color: #fad55c !default;
$dvtCategory4Color: #ed6647 !default;
$dvtCategory5Color: #8561c8 !default;
$dvtCategory6Color: #6ddbdb !default;
$dvtCategory7Color: #ffb54d !default;
$dvtCategory8Color: #e371b2 !default;
$dvtCategory9Color: #47bdef !default;
$dvtCategory10Color: #a2bf39 !default;
$dvtCategory11Color: #a75dba !default;
$dvtCategory12Color: #f7f37b !default;

// gauge threshold colors
//----------------------------------
// used for the first threshold on a gauge, typically represents a low value
$dvtThreshold1Color: #ed6647 !default;
// used for the second threshold on a gauge, typically represents a medium value
$dvtThreshold2Color: #fad55c !default;
// used for the third threshold on a gauge, typically represents a high value
$dvtThreshold3Color: #68c182 !default;

// background
//----------------------------------
$dvtComponentBgColor: $background1Color !default;
$dvtComponentBg2Color: #dddddd !default;
$dvtTooltipBgColor: $background2Color !default;

// border
//----------------------------------
$dvtBorderColor: $border6Color !default;
$dvtBorder2Color: $border7Color !default;
$dvtPanelBorderColor: $border2Color !default;

// charts
//----------------------------------
$dvtChartAxisTitleColor: $tertiaryTextColor !default;
$dvtChartStockFallingBgColor: $dvtThreshold1Color !default;
$dvtChartStockRangeBgColor: #b8b8b8 !default;
$dvtChartStockRisingBgColor: #6b6f74 !default;

// diagram
//----------------------------------
$dvtDiagramNodeBorderColorHover: $interaction2Color !default;
$dvtDiagramLinkBorderColorHover: $dvtDiagramNodeBorderColorHover !default;
$dvtDiagramLinkColor: #9bb2c7 !default;

// nbox
//----------------------------------
$dvtNBoxCellBgColor: #e5e5e5 !default;
$dvtNBoxCellBgColorMinimized: $background4Color !default;
$dvtNBoxDialogBorderColor: $border3Color !default;

// thematic map
//----------------------------------
$dvtMapBgColor: $dvtComponentBg2Color !default;
$dvtMapMarkerBgColor: #333333 !default;

// timeline
//----------------------------------

$dvtTimelineBorderColor:               $dvtPanelBorderColor !default;

$dvtTimelineItemBgColor:               $dvtComponentBgColor !default;
$dvtTimelineItemBgColorHover:          $dvtComponentBgColor !default;
$dvtTimelineItemBgColorSelected:       $dvtComponentBgColor !default;
$dvtTimelineItemBorderColor:           #648baf !default;
$dvtTimelineItemBorderColorHover:      #85bbe7 !default;
$dvtTimelineItemBorderColorSelected:   $dvtBorderColor !default;
$dvtTimelineItemDescriptionColor:      $textColor !default;
$dvtTimelineItemTitleColor:            $formControlLabelColor !default;

$dvtTimelineMajorAxisLabelColor:       $formControlLabelColor !default;
$dvtTimelineMajorAxisSeparatorColor:   #bcc7d2 !default;
$dvtTimelineMinorAxisSeparatorColor:   $dvtTimelineMajorAxisSeparatorColor !default;
$dvtTimelineMinorAxisBgColor:          $background2Color !default;
$dvtTimelineMinorAxisBorderColor:      $border2Color !default;
$dvtTimelineMinorAxisLabelColor:       $textColor !default;

$dvtTimelineOverviewBgColor:           #e6ecf3 !default;
$dvtTimelineOverviewLabelColor:        $formControlLabelColor !default;
$dvtTimelineOverviewWindowBgColor:     $background1Color !default;
$dvtTimelineOverviewWindowBorderColor: $border8Color !default;

$dvtTimelineSeriesBgColor:             $background2Color !default;
$dvtTimelineSeriesLabelColor:          $headerTextColor !default;
$dvtTimelineSeriesEmptyTextColor:      $textColor !default;

$dvtTimelineReferenceObjectColor:      #ff591f !default;

// treemap
//----------------------------------
$dvtTreemapNodeHeaderBorderColor: $headerBorderColor !default;
$dvtTreemapNodeHeaderBorderColorHover: $interaction5Color !default;
$dvtTreemapNodeHeaderBgColor: $interaction6Color !default;
$dvtTreemapNodeBorderColorHover: $interaction2Color !default;

// sunburst
//----------------------------------
$dvtSunburstNodeBorderColorHover: $dvtTreemapNodeBorderColorHover !default;



//----------------------------------------------------------------
// OPTIMIZATION VARIABLES
//----------------------------------------------------------------


// Please search for the term "optimizations" to find other 
// variables related to optimizing output


// INCLUDES
//----------------------------------------------------------------

// by default everything is included, but you can also start by setting 
// $includeAllClasses to false and then just add in what you want.

$includeAllClasses: true !default;
$includeNormalize:  ($includeAllClasses and $allowTagSelectors) !default;

// group includes 
//----------------------------------

// whether to include classes for tags like headers, links, etc
$includeTagClasses: $includeAllClasses !default;

// whether to include dvt classes
$includeDvtClasses: $includeAllClasses !default;

// whether to include form control classes
$includeFormControlClasses: $includeAllClasses !default;


// widget includes 
//----------------------------------
// Only the higher level include variables are defined in this file, 
// widget specific variables are defined in the widget files.
//
// For example at the top of the button file you'll see
// $includeButtonClasses:  $includeAllClasses !default;
//
// At the top of the accordion file you'll see
// $includeAccordionClasses:  $includeAllClasses !default;



// SLOW CSS
//----------------------------------------------------------------
// In certain browsers you may notice that by default we're not showing a  
// border-radius, box-shadow, or gradient even if the browser supports the  
// css property. In browsers where we feel the performance is unacceptably slow 
// we will put the following classes on the html element. 
//
//   - oj-slow-borderradius
//   - oj-slow-boxshadow, 
//   - oj-slow-cssgradients
//
// This is similar to what modernizr does with classes like no-borderradius
// browsers that don't support border radius.
//
// In the CSS you may see code like this:
//
//  .oj-button {
//      border-radius: 2px;
//  }
//  
//  html.oj-slow-borderradius .oj-button {
//      border-radius: 0;
//  }
//
//
// The main reason we need this is that IE has two rendering modes, 
// GPU and software rendering mode. There is no known way for JET to 
// detect which rendering mode is being used. Performance for  
// border radius can be very slow in software rendering mode, 
// and even GPU rendering has been slow in many cases. Therefore in 
// JET the oj-slow-borderradius class is put on the html element in all 
// supported versions of IE.
//
// You may control output of the overrides, or choose not to generate 
// border-radius/gradients/box-shadows at all, with the variables below.
//
// Valid values for the variables below are 
//   
//    - slowOverride: generate the regular value, but in addition generate 
//            overrides for slow browsers to remove 
//            border-radius/gradient/box-shadow on slow browsers. 
//    - on: no overrides, generate only the regular value
//    - off: don't write out any value at all. If you wanted to generate 
//            an IE only style sheet you might want to use "off" to
//            just not write out any  border-radius/gradient/box-shadow 
//            values in the first place.
$borderRadiusGeneration: slowOverride !default;
$boxShadowGeneration: slowOverride !default;
$gradientGeneration: slowOverride !default;


